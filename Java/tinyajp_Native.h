/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class tinyajp_Native */

#ifndef _Included_tinyajp_Native
#define _Included_tinyajp_Native
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     tinyajp_Native
 * Method:    parserNew
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_tinyajp_Native_parserNew
  (JNIEnv *, jclass);

/*
 * Class:     tinyajp_Native
 * Method:    parserGetWhitespace
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_tinyajp_Native_parserGetWhitespace
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    parserSetWhitespace
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_tinyajp_Native_parserSetWhitespace
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     tinyajp_Native
 * Method:    parserSetWhitespaceRegexp
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_tinyajp_Native_parserSetWhitespaceRegexp
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     tinyajp_Native
 * Method:    parserGetGrammar
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_tinyajp_Native_parserGetGrammar
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    parserSetGrammar
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_tinyajp_Native_parserSetGrammar
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     tinyajp_Native
 * Method:    parserGetGrammarAst
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_tinyajp_Native_parserGetGrammarAst
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    parserSetGrammarAst
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_tinyajp_Native_parserSetGrammarAst
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    parserGetSourceFile
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_tinyajp_Native_parserGetSourceFile
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    parserGetSourceBuffer
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_tinyajp_Native_parserGetSourceBuffer
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    parserSetSourceFile
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_tinyajp_Native_parserSetSourceFile
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     tinyajp_Native
 * Method:    parserSetSourceBuffer
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_tinyajp_Native_parserSetSourceBuffer
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     tinyajp_Native
 * Method:    parserParse
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_tinyajp_Native_parserParse
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    parserParseAsGrammar
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_tinyajp_Native_parserParseAsGrammar
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    parserParsedOK
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_tinyajp_Native_parserParsedOK
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    parserGetOutput
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_tinyajp_Native_parserGetOutput
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    parserGetErrorCol
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_tinyajp_Native_parserGetErrorCol
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    parserGetErrorRow
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_tinyajp_Native_parserGetErrorRow
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    parserGetError
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_tinyajp_Native_parserGetError
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    parserDelete
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_tinyajp_Native_parserDelete
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    nodeIsNil
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_tinyajp_Native_nodeIsNil
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    nodeIsList
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_tinyajp_Native_nodeIsList
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    listGetElement
 * Signature: (JI)J
 */
JNIEXPORT jlong JNICALL Java_tinyajp_Native_listGetElement
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     tinyajp_Native
 * Method:    nodeIsString
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_tinyajp_Native_nodeIsString
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    nodeGetString
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_tinyajp_Native_nodeGetString
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    nodeGetOperator
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_tinyajp_Native_nodeGetOperator
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    nodeGetOperand
 * Signature: (JI)J
 */
JNIEXPORT jlong JNICALL Java_tinyajp_Native_nodeGetOperand
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     tinyajp_Native
 * Method:    nodeGetOperandCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_tinyajp_Native_nodeGetOperandCount
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    nodeToString
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_tinyajp_Native_nodeToString
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    nodeToFile
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_tinyajp_Native_nodeToFile
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     tinyajp_Native
 * Method:    nodeGetRow
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_tinyajp_Native_nodeGetRow
  (JNIEnv *, jclass, jlong);

/*
 * Class:     tinyajp_Native
 * Method:    nodeGetCol
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_tinyajp_Native_nodeGetCol
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif
